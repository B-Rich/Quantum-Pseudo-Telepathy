<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Generic.IHashKeyCollection`1">
      <summary>[This topic is preliminary and is subject to change.]Represents  a generic collection that hashes its contents by using an <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> interface.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="TKey">The type of the elements in the collection.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IHashKeyCollection`1.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets the comparer that is used to obtain hash codes for the keys and to check equality.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The comparer used to obtain hash codes for the keys and to check equality.</returns>
    </member>
    <member name="T:System.Collections.Generic.ISortKeyCollection`1">
      <summary>[This topic is preliminary and is subject to change.]Represents a generic collection that sorts its contents by using an <see cref="T:System.Collections.Generic.IComparer`1" /> interface.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="TKey">The type of the elements in the collection.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.ISortKeyCollection`1.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets the comparer that is used to sort keys.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The comparer used to sort keys.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable collection of key/value pairs.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the specified key and value to the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the additional key/value pair.</returns>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.ArgumentException">The given key already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified key/value pairs to the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the additional key/value pairs.</returns>
      <param name="pairs">The key/value pairs to add.</param>
      <exception cref="T:System.ArgumentException">One of the given keys already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty dictionary with equivalent ordering and key/value comparison rules.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable dictionary contains the specified key/value pair.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the specified key/value pair is found in the dictionary; otherwise, false.</returns>
      <param name="pair">The key/value pair to locate.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the elements with the specified keys from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>
      <param name="keys">The keys of the elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified key/value pair.</returns>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The key value to set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified key/value pairs.</returns>
      <param name="items">The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether this dictionary contains a specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if a match for <paramref name="equalKey" /> is found; otherwise, false.</returns>
      <param name="equalKey">The key to search for.</param>
      <param name="actualKey">The matching key located in the dictionary if found, or <paramref name="equalkey" /> if no match is found.</param>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableDictionary`2.ValueComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets the value comparer used to determine the equality of keys for the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The value comparer used to determine the equality of keys for the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>[This topic is preliminary and is subject to change.]Represents a list of elements that cannot be modified.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Makes a copy of the list, and adds the specified object to the end of the  copied list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the object added, or this list if the object is already in the list.</returns>
      <param name="value">The object to add to the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Makes a copy of the list and adds the specified objects to the end of the copied list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the elements added, or this list if the elements already exist in the list.</returns>
      <param name="items">The objects to add to the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>[This topic is preliminary and is subject to change.]Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty list that has the same sorting and ordering semantics as this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at the specified index and contains the specified number of elements. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements if found; otherwise -1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Immutable.IImmutableList`1" />. This value can be null for reference types.</param>
      <param name="index">The zero-based starting indes of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="equalityComparer">The equality comparer to use to locate <paramref name="item" />. </param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>[This topic is preliminary and is subject to change.]Inserts the specified element at the specified index in the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list that includes the specified element.</returns>
      <param name="index">The zero-based index at which to insert the value.</param>
      <param name="element">The object to insert.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Inserts the specified elements at the specified index in the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list that includes the specified elements.</returns>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="items">The elements to insert.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that contains the specified number of elements and ends at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
      <param name="item">The object to locate in the list. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="equalityComparer">The equality comparer to match <paramref name="item" />. </param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specified object from this immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>Returns a new list with the specified object removed.</returns>
      <param name="value">The object to remove from the list.</param>
      <param name="equalityComparer">The equality comparer to use to locate <paramref name="value" />.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes all the elements that match the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list with the elements removed.</returns>
      <param name="match">The delegate that defines the conditions of the elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element at the specified index of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the element removed.</returns>
      <param name="index">The index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified object from the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list with the specified objects removed, if <paramref name="items" /> matched objects in the list.</returns>
      <param name="items">The objects to remove from the list.</param>
      <param name="equalityComparer">The equality comparer to use to determine if <paramref name="items" /> match any objects in the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes a range of elements from the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list with the elements removed.</returns>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Returns a new list with the first matching element in the list replaced with the specified element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list that contains <paramref name="newValue" />, even if <paramref name="oldvalue" /> is the same as <paramref name="newValue" />.</returns>
      <param name="oldValue">The element to be replaced.</param>
      <param name="newValue">The element to replace the  the first occurrence of <paramref name="oldValue" /> with</param>
      <param name="equalityComparer">The equality comparer to use for matching <paramref name="oldValue" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> does not exist in the list.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>[This topic is preliminary and is subject to change.]Replaces an element in the list at a given position with the specified element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list that contains the new element, even if the element at the specified location is the same as the new element.</returns>
      <param name="index">The position in the list of the element to replace.</param>
      <param name="value">The element to replace the old element with.</param>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable queue.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="T">The type of elements in the queue.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all elements from the immutable queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>[This topic is preliminary and is subject to change.]Removes the element at the beginning of the immutable queue, and returns the new queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable queue. This value is never null.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element to the end of the immutable queue, and returns the new queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable queue.</returns>
      <param name="value">The element to add.</param>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether this immutable queue is empty.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if this queue is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>[This topic is preliminary and is subject to change.]Returns the element at the beginning of the immutable queue without removing it.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the beginning of the queue.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>[This topic is preliminary and is subject to change.]Represents a set of elements that can only be modified by creating a new instance of the set.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="T">The type of element stored in the set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified element to this immutable set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the element added, or this set if the element is already in the set.</returns>
      <param name="value">The element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty set that has the same sorting and ordering semantics as this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether this immutable set contains a specified element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the set contains the specified value; otherwise, false.</returns>
      <param name="value">The element to locate in the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the elements in the specified collection from the current immutable set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the items removed; or the original set if none of the items were in the set.</returns>
      <param name="other">The collection of items to remove from this set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable set that contains only elements that exist in this set and the specified set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set that contains elements that exist in both sets.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Immutable.IImmutableSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable set is a proper (strict) subset of the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper subset of the specified collection; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable set is a proper (strict) superset of the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper superset of the specified collection; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable set is a subset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a subset of the specified collection; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable set is a superset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a superset of the specified collection; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable set overlaps with the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set and the specified collection share at least one common element; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified element from this immutable set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the specified element removed, or the current set if the element cannot be found in the set.</returns>
      <param name="value">The element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable set and the specified collection contain the same elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the sets are equal; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the set contains a specified value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if a matching value was found; otherwise, false.</returns>
      <param name="equalValue">The value to search for.</param>
      <param name="actualValue">The matching value from the set, if found, or <paramref name="equalvalue" /> if there are no matches.</param>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set with the items added; or the original set if all the items were already in the set.</returns>
      <param name="other">The collection to add elements from.</param>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable stack.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="T">The type of elements in the stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all objects from the immutable stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable stack.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether this immutable stack is empty.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if this stack is empty; otherwise,false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>[This topic is preliminary and is subject to change.]Returns the element at the top of the immutable stack without removing it.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the top of the stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>[This topic is preliminary and is subject to change.]Removes the element at the top of the immutable stack and returns the new stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new stack; never null</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>[This topic is preliminary and is subject to change.]Inserts an element at the top of the immutable stack and returns the new stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new stack.</returns>
      <param name="value">The element to push onto the stack.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>[This topic is preliminary and is subject to change.]Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>[This topic is preliminary and is subject to change.]Searches a sorted immutable array for a specified element and returns the zero-based index of the element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of item in the sorted <see cref="T:System.Collections.Immutable.ImmutableArray" />, if <paramref name="value" /> is found; otherwise, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of the index of the last element plus 1.</returns>
      <param name="array">The sorted array to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of element stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Searches a sorted immutable array for a specified element and returns the zero-based index of the element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of item in the sorted <see cref="T:System.Collections.Immutable.ImmutableArray" />, if <paramref name="value" /> is found; otherwise, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of the index of the last element plus 1.</returns>
      <param name="array">The sorted array to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The comparer to use when comparing elements for equality or null to use the <see cref="T:System.Collections.Generic.IComparer`1" /> implementation of each element.</param>
      <typeparam name="T">The type of element stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>[This topic is preliminary and is subject to change.]Searches a sorted immutable array for a specified element and returns the zero-based index of the element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of item in the sorted <see cref="T:System.Collections.Immutable.ImmutableArray" />, if <paramref name="value" /> is found; otherwise, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of the index of the last element plus 1.</returns>
      <param name="array">The sorted array to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of element stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Searches a sorted immutable array for a specified element and returns the zero-based index of the element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of item in the sorted <see cref="T:System.Collections.Immutable.ImmutableArray" />, if <paramref name="value" /> is found; otherwise, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of the index of the last element plus 1.</returns>
      <param name="array">The sorted array to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of element stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable array.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable array.</returns>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable array with specified objects from another immutable array.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>Returns An immutable array that contains the specified objects from the source array.</returns>
      <param name="items">The source array of objects.</param>
      <param name="start">The index of the first element to copy from <paramref name="items" />.</param>
      <param name="length">The number of elements from <paramref name="items" /> to include in this immutable array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``2(System.Collections.Immutable.ImmutableArray{``1})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
      <typeparam name="T"></typeparam>
      <typeparam name="TDerived"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable array that contains the specified object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>Returns An immutable array that contains the specified object.</returns>
      <param name="item">The object to store in the array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable array that contains the specified objects.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>Returns an immutable array that contains the specified objects.</returns>
      <param name="item1">The first object to store in the array.</param>
      <param name="item2">The second object to store in the array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable array that contains the specified objects.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable array that contains the specified objects.</returns>
      <param name="item1">The first object to store in the array.</param>
      <param name="item2">The second object to store in the array.</param>
      <param name="item3">The third object to store in the array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable array that contains the specified objects.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable array that contains the specified objects.</returns>
      <param name="item1">The first object to store in the array.</param>
      <param name="item2">The second object to store in the array. </param>
      <param name="item3">The third object to store in the array.</param>
      <param name="item4">The fourth object to store in the array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable array from the specified array of objects.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable array that contains the array of items.</returns>
      <param name="items">The array of objects to populate the array with.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable array with specified objects from another array.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable array that contains the specified objects from the source array.</returns>
      <param name="items">The source array of objects.</param>
      <param name="start">The index of the first element to copy from <paramref name="items" />.</param>
      <param name="length">The number of elements from <paramref name="items" /> to include in this immutable array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>[This topic is preliminary and is subject to change.]Creates a mutable array accessor that can be converted to an <see cref="T:System.Collections.Immutable.ImmutableArray" /> without allocating new memory.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A mutable array accessor of the specified type that can be efficiently converted to an immutable array.</returns>
      <typeparam name="T"> The type of elements stored in the builder.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Creates a mutable array accessor that can be converted to an <see cref="T:System.Collections.Immutable.ImmutableArray" /> without allocating new memory.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A mutable array accessor of the specified type that can be efficiently converted to an immutable array.</returns>
      <param name="initialCapacity">The initial capacity of the builder.</param>
      <typeparam name="T">The type of elements stored in the builder.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.From``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable array that contains the contents of the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable array that contains specified collection of items.</returns>
      <param name="items">The collection of objects to copy to the immutable array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates the specified collection once and creates an immutable array from the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable array that contains the specified collection of objects.</returns>
      <param name="items">The collection of objects to copy to the immutable array.</param>
      <typeparam name="TSource">The type of objects contained in the collection.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
      <typeparam name="TOther"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1.Enumerator" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear"></member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)"></member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)"></member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)"></member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <returns>Returns <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)"></member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <returns>Returns <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToString">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>A writable array accessor that can be converted into an <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> instance without allocating memory.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <typeparam name="TDerived"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <typeparam name="TDerived"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <typeparam name="TDerived"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)"></member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.EnsureCapacity(System.Int32)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)"></member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ReverseContents">
      <summary>Reverses the order of elements in the collection.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>Sorts the array.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})"></member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})"></member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <returns>Returns <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <returns>Returns <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <returns>Returns <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>An array enumerator.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>Gets the currently enumerated value.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>Advances to the next value to be enumerated.</summary>
      <returns>true if another item exists in the array; false otherwise.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>[This topic is preliminary and is subject to change.]Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> class.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the specified immutable dictionary contains the specified key/value pair.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if this map contains the specified key/value pair; otherwise, false.</returns>
      <param name="map">The immutable dictionary to search.</param>
      <param name="key">The key to locate in the immutable dictionary.</param>
      <param name="value">The value to locate on the specified key, if the key is found.</param>
      <typeparam name="TKey">The type of the keys in the immutable dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the immutable dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable dictionary.</returns>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable dictionary that contains the specified items.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified items.</returns>
      <param name="items">The items to prepopulate the immutable dictionary with.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable dictionary that uses the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable dictionary.</returns>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified items.</returns>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <param name="items">The items to prepopulate the dictionary with.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable dictionary that uses the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable dictionary.</returns>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <param name="valueComparer">The implementation to use to determine the equality of values in the dictionary.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable dictionary that contains the specified items and uses the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable collection that contains the specified items.</returns>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <param name="valueComparer">The implementation to use to determine the equality of values in the dictionary.</param>
      <param name="items">The items to prepopulate the dictionary with.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>Creates a new immutable dictionary builder.</summary>
      <returns>The new builder.</returns>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates a new immutable dictionary builder.</summary>
      <returns>The new builder.</returns>
      <param name="keyComparer">The key comparer.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a new immutable dictionary builder.</summary>
      <returns>The new builder.</returns>
      <param name="keyComparer">The key comparer.</param>
      <param name="valueComparer">The value comparer.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>Gets the value for a given key if a matching key exists in the dictionary.</summary>
      <returns>The value for the key, or default(TValue) if no matching key was found.</returns>
      <param name="dictionary">The dictionary to retrieve the value from.</param>
      <param name="key">The key to search for.</param>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Gets the value for a given key if a matching key exists in the dictionary.</summary>
      <returns>The value for the key, or <paramref name="defaultValue" /> if no matching key was found.</returns>
      <param name="dictionary">The dictionary to retrieve the value from.</param>
      <param name="key">The key to search for.</param>
      <param name="defaultValue">The default value to return if no matching key is found in the dictionary.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable dictionary that contains the key/value pairs in the specified sequence.</returns>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable dictionary that contains the key/value pairs in the specified sequence.</returns>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <param name="keyComparer">The key comparer to use when building the immutable dictionary.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable dictionary that contains the key/value pairs in the specified sequence.</returns>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <param name="keyComparer">The key comparer to use when building the immutable dictionary.</param>
      <param name="valueComparer">The value comparer to use for the immutable dictionary.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable dictionary that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable dictionary that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <param name="keyComparer">The key comparer to use for the dictionary.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable dictionary that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <param name="keyComparer">The key comparer to use for the dictionary.</param>
      <param name="valueComparer">The value comparer to use for the dictionary.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable, unordered collection of keys and values.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the specified key and value to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the additional key/value pair.</returns>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.ArgumentException">The given key already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified key/value pairs to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the additional key/value pairs.</returns>
      <param name="pairs">The key/value pairs to add.</param>
      <exception cref="T:System.ArgumentException">One of the given keys already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty dictionary with equivalent ordering and key/value comparison rules.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether this immutable dictionary contains the specified key/value pair.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the specified key/value pair is found in the dictionary; otherwise, false.</returns>
      <param name="pair">The key/value pair to locate.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable dictionary contains an element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the immutable dictionary contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key to locate.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable dictionary contains an element with the specified value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the specified value; otherwise, false.</returns>
      <param name="value">The value to locate. The value can be null for reference types.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of key/value pairs in the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of key/value pairs in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether this instance of the immutable dictionary is empty.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if this instance is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>[This topic is preliminary and is subject to change.]Gets the <paramref name="TValue" /> associated with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The value associated with the specified key. If no results are found, the operation throws an exception.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets the key comparer for the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The key comparer.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets the keys in the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The keys in the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary. </returns>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the elements with the specified keys from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>
      <param name="keys">The keys of the elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified key/value pair.</returns>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The key value to set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified key/value pairs.</returns>
      <param name="items">The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified value to the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The value to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all the items from the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the immutable dictionary is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the immutable dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if item was successfully removed; otherwise false.</returns>
      <param name="item">The item to remove from the dictionary.</param>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the provided key and value to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the dictionary.</exception>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element with the specified key. If no element is returned, throws a <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets a collection containing the keys of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A collection of keys of the object that implements the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>[This topic is preliminary and is subject to change.]Gets a collection containing the values of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A collection of values of the object that implements the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the dictionary to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether access to the immutable dictionary is synchronized (thread safe).NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if access to the dictionary is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>[This topic is preliminary and is subject to change.]Gets an object that can be used to synchronize access to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object that can be used to synchronize access to the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the provided key and value to the immutable dictionary object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>[This topic is preliminary and is subject to change.]Clears this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.NotSupportedException">The dictionary object is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable dictionary object contains an element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the dictionary object.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the immutable dictionary object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator object for the dictionary object.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the immutable dictionary object has a fixed size.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the immutable dictionary is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the immutable dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element with the specified key, or null if the key does not exist.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> object containing the keys of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable dictionary object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> object containing the values in the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the specified key and value to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the additional key/value pair.</returns>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified key/value pairs to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the additional key/value pairs.</returns>
      <param name="pairs">The key/value pairs to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty dictionary with equivalent order and key/value comparison rules.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the elements with the specified keys from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>
      <param name="keys">The keys of the elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified key/value pair.</returns>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The key value to set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified key/value pairs.</returns>
      <param name="items">The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToString">
      <summary>[This topic is preliminary and is subject to change.]Returns a string that represents this instance of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A string that represents this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> interface.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>[This topic is preliminary and is subject to change.]Gets the value associated with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the object that implements the dictionary contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key whose value will be retrieved.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets the value comparer used to determine whether values are equal.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The value comparer used to determine whether values are equal.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>[This topic is preliminary and is subject to change.]Gets the values in the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The values in the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Gets an instance of the immutable dictionary that uses the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An instance of the immutable dictionary that uses the given comparer.</returns>
      <param name="keyComparer">The key comparer to use.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>[This topic is preliminary and is subject to change.]Gets an instance of the immutable dictionary that uses the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An instance of the immutable dictionary that uses the given comparers.</returns>
      <param name="keyComparer">The key comparer to use.</param>
      <param name="valueComparer">The value comparer to use.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>[This topic is preliminary and is subject to change.]Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified item to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The object to add to the dictionary.</param>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element that has the specified key and value to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the dictionary.</exception>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Adds a sequence of values to this collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="items">The items to add to this collection.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all items from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable dictionary contains a specific value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> is found in the dictionary; otherwise, false.</returns>
      <param name="item">The object to locate in the dictionary.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable dictionary contains an element that has the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the dictionary.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable dictionary contains an element that has the specified value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the specified value; otherwise, false.</returns>
      <param name="value">The value to locate in the immutable dictionary. The value can be null for reference types.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of elements contained in the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of elements contained in the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Gets the value for a given key if a matching key exists in the dictionary.</summary>
      <returns>The value for the key, or default(TValue) if no matching key was found.</returns>
      <param name="key">The key to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Gets the value for a given key if a matching key exists in the dictionary.</summary>
      <returns>The value for the key, or <paramref name="defaultValue" /> if no matching key was found.</returns>
      <param name="key">The key to search for.</param>
      <param name="defaultValue">The default value to return if no matching key is found in the dictionary.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element that has the specified key.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The key comparer.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets a collection that contains the keys of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A collection that contains the keys of the object that implements the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the dictionary; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the dictionary.</returns>
      <param name="item">The object to remove from the dictionary.</param>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="keys">The keys for entries to remove from the dictionary.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the dictionary to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the dictionary. The  array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the dictionary is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator object that can be used to iterate through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the dictionary to an array of type <see cref="T:System.Collections.Generic.KeyValuePair" />, starting at the specified array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair" /> that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether access to the dictionary is synchronized (thread safe).NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if access to the dictionary is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>[This topic is preliminary and is subject to change.]Gets an object that can be used to synchronize access to the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object that can be used to synchronize access to the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the provided key and value to the dictionary object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the dictionary object contains an element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the dictionary.</returns>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the dictionary object has a fixed size.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the dictionary is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element that has the specified <paramref name="key" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable dictionary based on the contents of this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> interface.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>[This topic is preliminary and is subject to change.]Returns the value associated with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the object that implements the immutable dictionary contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key whose value will be retrieved.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the value comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The value comparer.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>[This topic is preliminary and is subject to change.]Gets a collection that contains the values of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A collection that contains the values of the object that implements the dictionary.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>[This topic is preliminary and is subject to change.]Enumerates the contents of the immutable dictionary without allocating any memory.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the current position of the enumerator.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element in the dictionary at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>[This topic is preliminary and is subject to change.]Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" /> class.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>[This topic is preliminary and is subject to change.]Advances the enumerator to the next element of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the dictionary.</returns>
      <exception cref="T:System.InvalidOperationException">The dictionary was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>[This topic is preliminary and is subject to change.]Sets the enumerator to its initial position, which is before the first element in the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.InvalidOperationException">The dictionary was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the current element in the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The current element in the dictionary.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>[This topic is preliminary and is subject to change.]Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> class.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable hash set.</returns>
      <typeparam name="T">The type of items to be stored in the immutable hash set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable hash set that uses the specified equality comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable hash set.</returns>
      <param name="equalityComparer">The implementation to use for custom equality comparison.</param>
      <typeparam name="T">The type of items in the immutable hash set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable hash set that contains the specified item and uses the specified equality comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable hash set that contains the specified item.</returns>
      <param name="equalityComparer">The implementation to use for customized equality comparison.</param>
      <param name="item">The item to prepopulate the hash set with.</param>
      <typeparam name="T">The type of items in the immutable hash set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable hash set that contains the specified array of items and uses the specified equality comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable hash set that contains the specified items.</returns>
      <param name="equalityComparer">The implementation to use for customized equality comparison.</param>
      <param name="items">An array that contains the items to prepopulate the hash set with.</param>
      <typeparam name="T">The type of items stored in the immutable hash set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable hash set that contains the specified item.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable hash set that contains the specified item.</returns>
      <param name="item">The item to prepopulate the hash set with.</param>
      <typeparam name="T">The type of items in the immutable hash set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable hash set that contains the specified array of items.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable hash set that contains the specified items.</returns>
      <param name="items">An array that contains the items to prepopulate the hash set with.</param>
      <typeparam name="T">The type of items in the immutable hash set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>Creates a new immutable hash set builder.</summary>
      <returns>The immutable collection.</returns>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates a new immutable hash set builder.</summary>
      <returns>The immutable collection.</returns>
      <param name="equalityComparer">The equality comparer.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.From``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable collection prefilled with the specified items.</summary>
      <returns>The new immutable collection.</returns>
      <param name="items">The items to prepopulate.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.From``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable collection prefilled with the specified items.</summary>
      <returns>The new immutable collection.</returns>
      <param name="equalityComparer">The equality comparer.</param>
      <param name="items">The items to prepopulate.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence and produces an immutable hash set of its contents.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable hash set that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable hash set that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate.</param>
      <param name="equalityComparer">The equality comparer to use for initializing and adding members to the hash set.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable, unordered hash set.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="T">The type of elements in the hash set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified element to the hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the element is added to the hash set; false if the element already existed in the hash set.</returns>
      <param name="item">The element to add to the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty hash set that has the same sorting and ordering semantics as this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether this immutable hash set contains the specified element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />; otherwise, false.</returns>
      <param name="item">The object to locate in the immutable hash set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of elements in the immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of elements in the hash set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the elements in the specified collection from the current immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the items removed; or the original set if none of the items were in the set.</returns>
      <param name="other">The collection of items to remove from this set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable hash set that contains elements that exist in both this set and the specified set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set that contains any elements that exist in both sets.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether the current immutable hash set is empty.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if this instance is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper subset of the specified collection; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper superset of the specified collection; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable hash set is a subset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a subset of the specified collection; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable hash set is a superset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a superset of the specified collection; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The comparer used to obtain hash codes for the keys and check equality.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable hash set overlaps with the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set and the specified collection share at least one common element; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified element from this immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the specified element removed, or the current set if the element cannot be found in the set.</returns>
      <param name="item">The element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable hash set and the specified collection contain the same elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the sets are equal; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an item to the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The object to add to the set.</param>
      <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all items from this set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the set to an array, starting at a particular index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether the set is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the set is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the element is successfully removed; otherwise, false.</returns>
      <param name="item">The object to remove from the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that iterates through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element to the current set and returns a value that indicates whether the element was successfully added.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the element is added to the set; false if the element is already in the set.</returns>
      <param name="item">The element to add to the collection.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes all elements in the specified collection from the current set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection of items to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains only elements that are also in a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current collection.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the set to an array, starting at a particular index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether access to the set is synchronized (thread safe).NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if access to the set is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>[This topic is preliminary and is subject to change.]Gets an object that can be used to synchronize access to the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object that can be used to synchronize access to the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified element to this immutable set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the element added, or this set if the element is already in the set.</returns>
      <param name="item">The element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty set that has the same sorting and ordering semantics as this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty set that has the same sorting or ordering semantics as this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the elements in the specified collection from the current set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the items removed; or the original set if none of the items were in the set.</returns>
      <param name="other">The collection of items to remove from this set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable set that contains elements that exist in both this set and the specified set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set that contains any elements that exist in both sets.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified element from this immutable set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the specified element removed, or the current set if the element cannot be found in the set.</returns>
      <param name="item">The element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set with the items added; or the original set if all the items were already in the set.</returns>
      <param name="other">The collection to add elements from.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>Searches the set for a given value and returns the equal value it finds, if any.</summary>
      <returns>A value indicating whether the search was successful.</returns>
      <param name="equalValue">The value to search for.</param>
      <param name="actualValue">The value from the set that the search found, or the original value if the search yielded no match.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable hash set with the items added; or the original set if all the items were already in the set.</returns>
      <param name="other">The collection to add elements from.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An instance of this immutable hash set that uses the given comparer.</returns>
      <param name="equalityComparer">The equality comparer to use.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>[This topic is preliminary and is subject to change.]Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified item to the immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the item did not already belong to the collection; otherwise, false.</returns>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all items from the immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.NotSupportedException">The hash set is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable hash set contains a specific value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> is found in the hash set ; otherwise, false.</returns>
      <param name="item">The object to locate in the hash set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of elements contained in the immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of elements contained in the immutable hash set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes all elements in the specified collection from the current hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection of items to remove from the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains only elements that are also in a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set is a proper (strict) subset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set is a proper (strict) superset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set is a subset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set is a superset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The key comparer.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set overlaps with the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the set ; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original set.</returns>
      <param name="item">The object to remove from the set.</param>
      <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set and the specified collection contain the same elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is equal to <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an item to the hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The object to add to the set.</param>
      <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the hash set to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the hash set is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the set is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable hash set based on the contents of this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>[This topic is preliminary and is subject to change.]Enumerates the contents of the immutable hash set without allocating any memory.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the current position of the enumerator.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>[This topic is preliminary and is subject to change.]Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" /> class.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>[This topic is preliminary and is subject to change.]Advances the enumerator to the next element of the immutable hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the hash set.</returns>
      <exception cref="T:System.InvalidOperationException">The hash set was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>[This topic is preliminary and is subject to change.]Sets the enumerator to its initial position, which is before the first element in the hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.InvalidOperationException">The hash set was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the current element in the hash set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The current element in the hash set.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>Contains interlocked exchange mechanisms for immutable collections.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>Obtains the value from a dictionary after having added it or updated an existing entry.</summary>
      <returns>The added or updated value.</returns>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key for the value to add or update.</param>
      <param name="addValueFactory">The function that receives the key and returns a new value to add to the dictionary when no value previously exists.</param>
      <param name="updateValueFactory">The function that receives the key and prior value and returns the new value with which to update the dictionary.</param>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>Obtains the value from a dictionary after having added it or updated an existing entry.</summary>
      <returns>The added or updated value.</returns>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key for the value to add or update.</param>
      <param name="addValue">The value to use if no previous value exists.</param>
      <param name="updateValueFactory">The function that receives the key and prior value and returns the new value with which to update the dictionary.</param>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>Atomically enqueues an element to the tail of a queue.</summary>
      <param name="location">The variable or field to atomically update.</param>
      <param name="value">The value to enqueue.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>Obtains the value for the specified key from a dictionary, or adds a new value to the dictionary where the key did not previously exist.</summary>
      <returns>The value obtained from the dictionary or  if it was not present.</returns>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key for the value to retrieve or add.</param>
      <param name="valueFactory">The function to execute to obtain the value to insert into the dictionary if the key is not found.            This delegate will not be invoked more than once.</param>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>Obtains the value for the specified key from a dictionary, or adds a new value to the dictionary where the key did not previously exist.</summary>
      <returns>The value obtained from the dictionary or  if it was not present.</returns>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key for the value to retrieve or add.</param>
      <param name="valueFactory">The function to execute to obtain the value to insert into the dictionary if the key is not found.</param>
      <param name="factoryArgument">The argument to pass to the value factory.</param>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TArg"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Obtains the value for the specified key from a dictionary, or adds a new value to the dictionary where the key did not previously exist.</summary>
      <returns>The value obtained from the dictionary or  if it was not present.</returns>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key for the value to retrieve or add.</param>
      <param name="value">The value to add to the dictionary if one is not already present.</param>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Assigns a field or variable containing an immutable array to the specified value            if it is currently equal to another specified value. Returns the previous value.</summary>
      <returns>The prior value at the specified .</returns>
      <param name="location">The field or local variable to change.</param>
      <param name="value">The new value to assign.</param>
      <param name="comparand">The value to check equality for before assigning.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Assigns a field or variable containing an immutable array to the specified value and returns the previous value.</summary>
      <returns>The prior value at the specified .</returns>
      <param name="location">The field or local variable to change.</param>
      <param name="value">The new value to assign.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Assigns a field or variable containing an immutable array to the specified value            if it is has not yet been initialized.</summary>
      <returns>True if the field was assigned the specified value; false if it was previously initialized.</returns>
      <param name="location">The field or local variable to change.</param>
      <param name="value">The new value to assign.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>Pushes a new element onto a stack.</summary>
      <param name="location">The variable or field to atomically update.</param>
      <param name="value">The value to push.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Adds the specified key and value to the dictionary if no colliding key already exists in the dictionary.</summary>
      <returns>true if the key was not previously set in the dictionary and the value was set; false otherwise.</returns>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key to add, if is not already defined in the dictionary.</param>
      <param name="value">The value to add.</param>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>Atomically removes the element at the head of a queue and returns it to the caller, if the queue is not empty.</summary>
      <returns>true if the queue was not empty and the head element was removed; false otherwise.</returns>
      <param name="location">The variable or field to atomically update.</param>
      <param name="value">Receives the value from the head of the queue, if the queue is non-empty.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>Pushes a new element onto a stack.</summary>
      <returns>true if an element was removed from the stack; false otherwise.</returns>
      <param name="location">The variable or field to atomically update.</param>
      <param name="value">The value popped from the stack, if it was non-empty.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>Removes an entry from the dictionary with the specified key if it is defined and returns its value.</summary>
      <returns>true if the key was found and removed; false otherwise.</returns>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key to remove.</param>
      <param name="value">Receives the value from the pre-existing entry, if one exists.</param>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>Sets the specified key to the given value if the key already is set to a specific value.</summary>
      <returns>true if the key and comparison value were present in the dictionary and the update was made; false otherwise.</returns>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key to update.</param>
      <param name="newValue">The new value to set.</param>
      <param name="comparisonValue">The value that must already be set in the dictionary in order for the update to succeed.</param>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>[This topic is preliminary and is subject to change.]Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableList`1" /> class.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable list.</returns>
      <typeparam name="T">The type of items to be stored in the immutable list.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable list that contains the specified item.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list that contains the specified item.</returns>
      <param name="item">The item to prepopulate the list with.</param>
      <typeparam name="T">The type of items in the immutable list.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable list that contains the specified array of items.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list that contains the specified items.</returns>
      <param name="items">An array that contains the items to prepopulate the list with.</param>
      <typeparam name="T">The type of items in the immutable list.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>Creates a new immutable list builder.</summary>
      <returns>The immutable collection builder.</returns>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.From``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable collection prefilled with the specified items.</summary>
      <returns>The new immutable collection.</returns>
      <param name="items">The items to prepopulate.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the ImmutableList&amp;amp;lt;T&amp;amp;gt;</summary>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the ImmutableList&amp;lt;T&amp;gt; that extends from index to the last element, if found; otherwise, –1.</returns>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the ImmutableList&amp;amp;lt;T&amp;amp;gt;</summary>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the ImmutableList&amp;lt;T&amp;gt; that extends from index to the last element, if found; otherwise, –1.</returns>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the ImmutableList&amp;amp;lt;T&amp;amp;gt; that extends from the specified index to the last element.</summary>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the ImmutableList&amp;lt;T&amp;gt; that extends from index to the last element, if found; otherwise, –1.</returns>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the ImmutableList&amp;amp;lt;T&amp;amp;gt; that extends from the specified index to the last element.</summary>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the ImmutableList&amp;lt;T&amp;gt; that extends from index to the last element, if found; otherwise, –1.</returns>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire ImmutableList&amp;amp;lt;T&amp;amp;gt;.</summary>
      <returns>The zero-based index of the last occurrence of item within the entire the ImmutableList&amp;lt;T&amp;gt;, if found; otherwise, –1.</returns>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire ImmutableList&amp;amp;lt;T&amp;amp;gt;.</summary>
      <returns>The zero-based index of the last occurrence of item within the entire the ImmutableList&amp;lt;T&amp;gt;, if found; otherwise, –1.</returns>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the ImmutableList&amp;amp;lt;T&amp;amp;gt; that extends from the first element to the specified index.</summary>
      <returns>The zero-based index of the last occurrence of item within the range of elements in the ImmutableList&amp;lt;T&amp;gt; that extends from the first element to index, if found; otherwise, –1.</returns>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the ImmutableList&amp;amp;lt;T&amp;amp;gt; that extends from the first element to the specified index.</summary>
      <returns>The zero-based index of the last occurrence of item within the range of elements in the ImmutableList&amp;lt;T&amp;gt; that extends from the first element to index, if found; otherwise, –1.</returns>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Removes the specified value from this list.</summary>
      <returns>A new list with the element removed, or this list if the element is not in this list.</returns>
      <param name="list">The list to search.</param>
      <param name="value">The value to remove.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Removes the specified values from this list.</summary>
      <returns>A new list with the elements removed.</returns>
      <param name="list">The list to search.</param>
      <param name="items">The items to remove if matches are found in this list.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>Replaces the first equal element in the list with the specified element.</summary>
      <returns>The new list -- even if the value being replaced is equal to the new value for that position.</returns>
      <param name="list">The list to search.</param>
      <param name="oldValue">The element to replace.</param>
      <param name="newValue">The element to replace the old element with.</param>
      <typeparam name="T"></typeparam>
      <exception cref="T:System.ArgumentException">Thrown when the old value does not exist in the list.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence and produces an immutable list of its contents.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable list that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified object to the end of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list with the object added, or the current list if it already contains the specified object.</returns>
      <param name="value">The object to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Adds the elements of the specified collection to the end of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list with the elements added, or the current list if it already contains the specified elements.</returns>
      <param name="items">The collection whose elements will be added to the end of the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary> Searches a range of elements in the sorted System.Collections.Generic.List&amp;lt;T&amp;gt; for an element using the specified comparer and returns the zero-based index of the element. </summary>
      <returns> The zero-based index of item in the sorted System.Collections.Generic.List&amp;lt;T&amp;gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&amp;lt;T&amp;gt;.Count. </returns>
      <param name="index">The zero-based starting index of the range to search.</param>
      <param name="count"> The length of the range to search.</param>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <param name="comparer"> The System.Collections.Generic.IComparer&amp;lt;T&amp;gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&amp;lt;T&amp;gt;.Default. </param>
      <exception cref="T:System.ArgumentOutOfRangeException"> index is less than 0.-or-count is less than 0. </exception>
      <exception cref="T:System.ArgumentException"> index and count do not denote a valid range in the System.Collections.Generic.List&lt;T&gt;. </exception>
      <exception cref="T:System.InvalidOperationException"> comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T. </exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary> Searches the entire sorted System.Collections.Generic.List&amp;lt;T&amp;gt; for an element using the default comparer and returns the zero-based index of the element. </summary>
      <returns> The zero-based index of item in the sorted System.Collections.Generic.List&amp;lt;T&amp;gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&amp;lt;T&amp;gt;.Count. </returns>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <exception cref="T:System.InvalidOperationException"> The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T. </exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>  Searches the entire sorted System.Collections.Generic.List&amp;lt;T&amp;gt; for an element  using the specified comparer and returns the zero-based index of the element. </summary>
      <returns> The zero-based index of item in the sorted System.Collections.Generic.List&amp;lt;T&amp;gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&amp;lt;T&amp;gt;.Count. </returns>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <param name="comparer"> The System.Collections.Generic.IComparer&amp;lt;T&amp;gt; implementation to use when comparing elements.-or-null to use the default comparer System.Collections.Generic.Comparer&amp;lt;T&amp;gt;.Default. </param>
      <exception cref="T:System.InvalidOperationException"> comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T. </exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all elements from the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty list that retains the same sort or unordered semantics that this instance has.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether this immutable list contains the specified value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the list contains the specified value; otherwise, false.</returns>
      <param name="value">The value to locate.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>[This topic is preliminary and is subject to change.]Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="converter">A delegate that converts each element from one type to another type.</param>
      <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index in the source immutable list at which copying begins.</param>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>[This topic is preliminary and is subject to change.]Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of elements contained in the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of elements in the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
      <param name="match">The delegate that defines the conditions of the elements to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Retrieves all the elements that match the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.</returns>
      <param name="match">The delegate that defines the conditions of the elements to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</returns>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</returns>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</returns>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, ?1.</returns>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, ?1.</returns>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, ?1.</returns>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>[This topic is preliminary and is subject to change.]Performs the specified action on each element of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="action">The delegate to perform on each element of the immutable list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator  that can be used to iterate through the immutable list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Creates a shallow copy of a range of elements in the source immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A shallow copy of a range of elements in the source immutable list.</returns>
      <param name="index">The zero-based index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire immutable list, if found; otherwise, ?1.</returns>
      <param name="value">The object to locate in the immutable list. The value can be <paramref name="null" /> for reference types.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the ImmutableList&amp;amp;lt;T&amp;amp;gt; that starts at the specified index and contains the specified number of elements.</summary>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the ImmutableList&amp;lt;T&amp;gt; that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>[This topic is preliminary and is subject to change.]Inserts the specified object into the immutable list at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable list after the object is inserted.</returns>
      <param name="index">The zero-based index at which to insert the object.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Inserts the elements of a collection into the immutable list at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable list after the elements are inserted.</returns>
      <param name="index">The zero-based index at which to insert the elements.</param>
      <param name="items">The collection whose elements should be inserted.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether this list is empty.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the list is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the specified index of the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the ImmutableList&amp;amp;lt;T&amp;amp;gt; that contains the specified number of elements and ends at the specified index.</summary>
      <returns>The zero-based index of the last occurrence of item within the range of elements in the ImmutableList&amp;lt;T&amp;gt; that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the ImmutableList&amp;lt;T&amp;gt;. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of the specified object from this immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the object removed, or this list if the specified object is not in this list.</returns>
      <param name="value">The object to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>See the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> interface.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes all the elements that match the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new list with the elements removed.</returns>
      <param name="match">The delegate that defines the conditions of the elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the element removed.</returns>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes a range of elements from this immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the elements removed.</returns>
      <param name="items">The collection whose elements should be removed if matches are found in this list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Removes the specified values from this list.</summary>
      <returns>A new list with the elements removed.</returns>
      <param name="items">The items to remove if matches are found in this list.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the elements removed.</returns>
      <param name="index">The starting index to begin removal.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>[This topic is preliminary and is subject to change.]Replaces the specified element in the immutable list with a new element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new list with the replaced element, even if it is equal to the old element.</returns>
      <param name="oldValue">The element to replace.</param>
      <param name="newValue">The element to replace <paramref name="oldValue" /> with.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> does not exist in the immutable list.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>See the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> interface.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>[This topic is preliminary and is subject to change.]Reverses the order of the elements in the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The reversed list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Reverses the order of the elements in the specified range of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The reversed list.</returns>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>[This topic is preliminary and is subject to change.]Replaces an element at a given position in the immutable list with the specified element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new list with the replaced element, even if it is equal to the old element at that position.</returns>
      <param name="index">The position in the list of the element to replace.</param>
      <param name="value">The element to replace the old element with.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>[This topic is preliminary and is subject to change.]Sorts the elements in the entire immutable list using the default comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Sorts the elements in the entire immutable list using the specified comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The sorted list.</returns>
      <param name="comparer">The  implementation to use when comparing elements, or null to use the default comparer (<see cref="T:System.Collections.Generic.Comparer&lt;T&gt;.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>[This topic is preliminary and is subject to change.]Sorts the elements in the entire immutable list using the specified <see cref="T:System.Comparison&lt;T&gt;" />.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The sorted list.</returns>
      <param name="comparison">The delegate to use when comparing elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Sorts a range of elements in the immutable list using the specified comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The sorted list.</returns>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The implementation to use when comparing elements, or null to use the default comparer (<see cref="T:System.Collections.Generic.Comparer&lt;T&gt;.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified item to the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The item to add.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all items from the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.NotSupportedException"></exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether the list is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the list is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the list; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original list.</returns>
      <param name="item">The object to remove.</param>
      <exception cref="T:System.NotSupportedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>[This topic is preliminary and is subject to change.]Inserts an object in the immutable list at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.NotSupportedException"></exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the specified index. If no item was returned, the property throws a <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes the value at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from immutable list.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether access to the list is synchronized.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the access to the list is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>[This topic is preliminary and is subject to change.]Gets an object that can be used to synchronize access to the ICollection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object that can be used to synchronize access to the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Adds an item to the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.</returns>
      <param name="value">The object to add to the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all items from the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable list contains a specific value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the object is found in the list; otherwise, false.</returns>
      <param name="value">The object to locate in the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines the index of a specific item in the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Inserts an item into the immutable list at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert into the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether the list has a fixed size.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the list has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether the immutable list is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the list is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="value">The object to remove from the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes the item at the specified index of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified value to this immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the element added, or this list if the element is already in the list.</returns>
      <param name="value">The value to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified values to this immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the elements added, or this list if the elements are already in the list.</returns>
      <param name="items">The values to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty list that has the same sorting and ordering semantics as this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty list that has the same sorting and ordering semantics as this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>[This topic is preliminary and is subject to change.]Inserts the specified element at the specified index in the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list that includes the specified element.</returns>
      <param name="index">The index at which to insert the value.</param>
      <param name="item">The element to insert.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Inserts the specified elements at the specified index in the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list that includes the specified elements.</returns>
      <param name="index">The index at which to insert the elements.</param>
      <param name="items">The elements to insert.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>See the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> interface.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes all the elements that match the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list with the elements removed.</returns>
      <param name="match">The delegate that defines the conditions of the elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element at the specified index of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the element removed.</returns>
      <param name="index">The index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>See the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> interface.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified number of elements at the specified location from this list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new list with the elements removed.</returns>
      <param name="index">The starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Replaces an element in the list with the specified element.</summary>
      <returns>The new list.</returns>
      <param name="oldValue">The element to replace.</param>
      <param name="newValue">The element to replace the old element with.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <exception cref="T:System.ArgumentException">Thrown when the old value does not exist in the list.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>[This topic is preliminary and is subject to change.]Replaces an element in the list at a given position with the specified element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new list.</returns>
      <param name="index">The position in the list of the element to replace.</param>
      <param name="value">The element to replace the old element with.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>[This topic is preliminary and is subject to change.]Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The created list with the same contents as this list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether every element in the immutable list matches the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
      <param name="match">The delegate that defines the conditions to check against the elements.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>[This topic is preliminary and is subject to change.]Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an item to the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The item to add to the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches the specified range of the <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> for an element using the specified comparer and returns the zero-based index of the element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of item in the <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" />.</returns>
      <param name="index">The zero-based starting index of the range to search.</param>
      <param name="count">The length of the range to search.</param>
      <param name="item">The object to locate. This value can be null for reference types.</param>
      <param name="comparer">The implementation to use when comparing elements, or null for the default comparer.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>[This topic is preliminary and is subject to change.]Searches the entire <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> for an element using the default comparer and returns the zero-based index of the element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of item in the <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" />.</returns>
      <param name="item">The object to locate. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches the entire <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> for an element using the specified comparer and returns the zero-based index of the element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of item in the <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" />.</returns>
      <param name="item">The object to locate. This value can be null for reference types.</param>
      <param name="comparer">The implementation to use when comparing elements, or null for the default comparer.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all items from the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable list contains a specific value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if item is found in the list; otherwise, false.</returns>
      <param name="item">The object to locate in the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable list from the list represented by this builder by using the converter function.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable list from the list represented by this builder.</returns>
      <param name="converter">The converter function.</param>
      <typeparam name="TOutput">The type of the output of the delegate converter function.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index in the source immutable list at which copying begins.</param>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>[This topic is preliminary and is subject to change.]Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of elements in this immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of elements in this list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
      <param name="match">The delegate that defines the conditions of the elements to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Retrieves all the elements that match the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.</returns>
      <param name="match">The delegate that defines the conditions of the elements to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type <paramref name="T" />.</returns>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>[This topic is preliminary and is subject to change.]Performs the specified action on each element of the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="action">The delegate to perform on each element of the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Creates a shallow copy of a range of elements in the source immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A shallow copy of a range of elements in the source immutable list.</returns>
      <param name="index">The zero-based index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the immutable list, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the immutable list. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the immutable list. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the immutable list. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> that starts at the specified index and contains the specified number of elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1</returns>
      <param name="item">The object to locate in the immutable list. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements to search.</param>
      <param name="equalityComparer">The value comparer to use for comparing elements for equality.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>[This topic is preliminary and is subject to change.]Inserts an item to the immutable list at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the immutable list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Inserts the elements of a collection into the immutable list at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="items">The collection whose elements should be inserted into the immutable list. The collection itself cannot be null, but it can contain elements that are null, if type <paramref name="T" /> is a reference type.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the value for a given index in the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The value at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the entire immutable list, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the immutable list. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the immutable list that extends from the first element to <paramref name="index" />, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the immutable list. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the immutable list that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the immutable list. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.</summary>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1</returns>
      <param name="item">The object to locate in the immutable list. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements to search.</param>
      <param name="equalityComparer">The value comparer to use for comparing elements for equality.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if item was successfully removed from the list; otherwise, false. This method also returns false if item is not found in the list.</returns>
      <param name="item">The object to remove from the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes all the elements that match the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of elements removed from the immutable list.</returns>
      <param name="match">The delegate that defines the conditions of the elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes the item at the specified index of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index of the item to remove from the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>[This topic is preliminary and is subject to change.]Reverses the order of the elements in the entire immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Reverses the order of the elements in the specified range of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>[This topic is preliminary and is subject to change.]Sorts the elements in the entire immutable list by using the default comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Sorts the elements in the entire immutable list by using the specified comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="comparer">The implementation to use when comparing elements, or null to use the default comparer (<see cref="P:System.Collections.Generic.Comparer&lt;T&gt;.Default." />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>[This topic is preliminary and is subject to change.]Sorts the elements in the entire immutable list by using the specified comparison object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="comparison">The object to use when comparing elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Sorts the elements in a range of elements in the immutable list  by using the specified comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The implementation to use when comparing elements, or null to use the default comparer (<see cref="P:System.Collections.Generic.Comparer&lt;T&gt;.Default." />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether this instance is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the list is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the list to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether access to the list is synchronized (thread safe).NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if access to the list is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>[This topic is preliminary and is subject to change.]Gets an object that can be used to synchronize access to the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object that can be used to synchronize access to the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Adds an item to the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</returns>
      <param name="value">The object to add to the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all items from the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the list contains a specific value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the list; otherwise, false.</returns>
      <param name="value">The object to locate in the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines the index of a specific item in the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Inserts an item to the list at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert into the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the list has a fixed size.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the list has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the list is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>Always false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the <see cref="T:System.Object" /> at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The object at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="value">The object to remove from the list.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable list based on the contents of this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether every element in the immutable list matches the conditions defined by the specified predicate.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
      <param name="match">The delegate that defines the conditions to check against the elements.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>[This topic is preliminary and is subject to change.]Enumerates the contents of a binary tree.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the current position of the enumerator.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>[This topic is preliminary and is subject to change.]Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" /> class.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>[This topic is preliminary and is subject to change.]Advances enumeration to the next element of the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>[This topic is preliminary and is subject to change.]Sets the enumerator to its initial position, which is before the first element in the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the current element in the immutable list.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The current element in the immutable list.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>[This topic is preliminary and is subject to change.]Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> class.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable queue.</returns>
      <typeparam name="T">The type of items to be stored in the immutable queue.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable queue that contains the specified item.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable queue that contains the specified item.</returns>
      <param name="item">The item to prepopulate the queue with.</param>
      <typeparam name="T">The type of items in the immutable queue.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable queue that contains the specified array of items.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable queue that contains the specified items.</returns>
      <param name="items">An array that contains the items to prepopulate the queue with.</param>
      <typeparam name="T">The type of items in the immutable queue.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>[This topic is preliminary and is subject to change.]Removes the item at the beginning of the immutable queue, and returns the new queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new queue with the item removed.</returns>
      <param name="queue">The queue to remove the item from.</param>
      <param name="value">When this method returns, contains the item from the beginning of the queue.</param>
      <typeparam name="T">The type of elements in the immutable queue.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.From``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable collection prefilled with the specified items.</summary>
      <returns>The new immutable collection.</returns>
      <param name="items">The items to prepopulate.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable queue.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="T">The type of elements in the queue.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all objects from the immutable queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The empty immutable queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>[This topic is preliminary and is subject to change.]Removes the element at the beginning of the immutable queue, and returns the new queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable queue; never null.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>[This topic is preliminary and is subject to change.]Removes the item at the beginning of the immutable queue, and returns the new queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable queue with the beginning element removed.</returns>
      <param name="value">When this method returns, contains the element from the beginning of the queue.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element to the end of the immutable queue, and returns the new queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable queue.</returns>
      <param name="value">The element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the queue.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether this immutable queue is empty.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if this queue is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>[This topic is preliminary and is subject to change.]Returns the element at the beginning of the immutable queue without removing it.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the beginning of the queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator  that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all elements from the immutable queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The empty immutable queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>[This topic is preliminary and is subject to change.]Removes the element at the beginning of the immutable queue, and returns the new queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable queue; never null.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element to the end of the immutable queue, and returns the new queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable queue.</returns>
      <param name="value">The element to add.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>[This topic is preliminary and is subject to change.]Enumerates the contents of an immutable queue without allocating any memory.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the current position of the enumerator. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the current position of the enumerator. </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Dispose">
      <summary>[This topic is preliminary and is subject to change.]Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator" /> class.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>[This topic is preliminary and is subject to change.]Advances the enumerator to the next element of the immutable queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Reset">
      <summary>[This topic is preliminary and is subject to change.]Sets the enumerator to its initial position, which is before the first element in the queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the current position in the queue.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the current position in the queue.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>[This topic is preliminary and is subject to change.]Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> class.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable sorted dictionary.</returns>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable sorted dictionary that uses the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable sorted dictionary.</returns>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable sorted dictionary that contains the specified items and uses the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable sorted dictionary that contains the specified items.</returns>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <param name="items">The items to prepopulate the immutable dictionary with.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable sorted dictionary that uses the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable sorted dictionary.</returns>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <param name="valueComparer">The implementation to use to determine the equality of values in the dictonary.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable sorted dictionary that contains the specified items and uses the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified items.</returns>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <param name="valueComparer">The implementation to use to determine the equality of values in the dictionary.</param>
      <param name="items">The items to prepopulate the dictionary with.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable sorted dictionary that contains the specified items.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified items.</returns>
      <param name="items">The items to prepopulate the dictionary with.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>Creates a new immutable sorted dictionary builder.</summary>
      <returns>The immutable collection builder.</returns>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>Creates a new immutable sorted dictionary builder.</summary>
      <returns>The immutable collection builder.</returns>
      <param name="keyComparer">The key comparer.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a new immutable sorted dictionary builder.</summary>
      <returns>The immutable collection builder.</returns>
      <param name="keyComparer">The key comparer.</param>
      <param name="valueComparer">The value comparer.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable sorted dictionary that contains the key/value pairs in the specified sequence.</returns>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable sorted dictionary that contains the key/value pairs in the specified sequence.</returns>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <param name="keyComparer">The key comparer to use when building the immutable dictionary.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable sorted dictionary that contains the key/value pairs in the specified sequence.</returns>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <param name="keyComparer">The key comparer to use when building the immutable dictionary.</param>
      <param name="valueComparer">The value comparer to use for the immutable dictionary.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable sorted dictionary that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable dictionary that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <param name="keyComparer">The key comparer to use for the dictionary.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable sorted dictionary that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <param name="keyComparer">The key comparer to use for the dictionary.</param>
      <param name="valueComparer">The value comparer to use for the dictionary.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable sorted map implementation.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the specified key and value to the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable sorted dictionary that contains the additional key/value pair.</returns>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The value of entry to add.</param>
      <exception cref="T:System.ArgumentException.">The given key already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specific key/value pairs to the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the additional key/value pairs.</returns>
      <param name="items">The key/value pairs to add.</param>
      <exception cref="T:System.ArgumentException.">One of the given keys already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty dictionary with equivalent ordering and key/value comparison rules.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether this immutable sorted dictionary contains the specified key/value pair.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the specified key/value pair is found in the dictionary; otherwise, false.</returns>
      <param name="pair">The key/value pair to locate.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether this immutable sorted map contains the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the immutable dictionary contains the specified key; otherwise, false.</returns>
      <param name="key">The key to locate.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable sorted dictionary contains an element with the specified value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the specified value; otherwise, false.</returns>
      <param name="value">The value to locate. The value can be null for reference types.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of key/value pairs in the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of key/value pairs in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if this instance is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>[This topic is preliminary and is subject to change.]Gets the <paramref name="TValue" /> associated with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The value associated with the specified key. If no results are found, the operation throws an exception.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets the key comparer for the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The key comparer for the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets the keys in the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The keys in the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified value from the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.</returns>
      <param name="value">The value of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the elements with the specified keys from the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>
      <param name="keys">The keys of the elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable sorted dictionary that contains the specified key/value pair.</returns>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The key value to set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable dictionary that contains the specified key/value pairs.</returns>
      <param name="items">The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified item to the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all the items from the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the collection to an array, starting at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the immutable dictionary is read only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the immutable dictionary is read only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of the specified object from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the item was successfully removed; otherwise, false. </returns>
      <param name="item">The item to remove from the dictionary.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the provided key and value to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the dictionary.</exception>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element with the specified key. If no element is returned, throws a <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets a collection containing the keys of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A collection of keys.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the original dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>[This topic is preliminary and is subject to change.]Gets a collection containing the values of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A collection of values of the object that implements the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the dictionary to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether access to the immutable dictionary is synchronized (thread safe).NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if access to the dictionary is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>[This topic is preliminary and is subject to change.]Gets an object that can be used to synchronize access to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object that can be used to synchronize access to the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the provided key and value to the dictionary object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>[This topic is preliminary and is subject to change.]Clears this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <exception cref="T:System.NotSupportedException">The dictionary object is read-only.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable dictionary object contains an element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the dictionary object.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the immutable dictionary object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator object for the dictionary object.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the immutable dictionary object has a fixed size.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the immutable dictionary is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element with the specified key, or null if the key does not exist.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> object containing the keys of the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object containing the keys of the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable dictionary object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> object containing the values in the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the specified key and value to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the additional key/value pair.</returns>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified key/value pairs to the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the additional key/value pairs.</returns>
      <param name="pairs">The key/value pairs to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty dictionary with equivalent ordering and key/value comparison rules.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the matching entry removed; or this instance if the specified key cannot be found in the dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the elements with the specified keys from the immutable dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>
      <param name="keys">The keys of the elements to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified key/value pair.</returns>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The key value to set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable dictionary that contains the specified key/value pairs.</returns>
      <param name="items">The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A collection with the same contents as this dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> interface.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>[This topic is preliminary and is subject to change.]Gets the value associated with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key whose value will be retrieved.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the <paramref name="value" /> parameter.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets the value comparer used to determine whether values are equal.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The value comparer used to determine whether values are equal.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>[This topic is preliminary and is subject to change.]Gets the values in the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The values in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Gets an instance of the immutable sorted dictionary that uses the specified key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An instance of the immutable dictionary that uses the given comparer.</returns>
      <param name="keyComparer">The key comparer to use.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>[This topic is preliminary and is subject to change.]Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An instance of the immutable dictionary that uses the given comparers.</returns>
      <param name="keyComparer">The key comparer to use.</param>
      <param name="valueComparer">The value comparer to use.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>[This topic is preliminary and is subject to change.]Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified item to the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The object to add to the dictionary.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element that has the specified key and value to the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>[This topic is preliminary and is subject to change.]Adds a sequence of values to the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="items">The items to add to the dictionary.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all items from the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable sorted dictionary contains a specific value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> is found in the dictionary; otherwise, false.</returns>
      <param name="item">The object to locate in the dictionary.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable sorted dictionary contains an element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the dictionary.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the immutable sorted dictionary contains an element with the specified value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the immutable sorted dictionary contains an element with the specified value; otherwise, false.</returns>
      <param name="value">The value to locate in the dictionary. The value can be null for reference types.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of elements in this immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of elements in this dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Gets the value for a given key if a matching key exists in the dictionary.</summary>
      <returns>The value for the key, or default(TValue) if no matching key was found.</returns>
      <param name="key">The key to search for.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Gets the value for a given key if a matching key exists in the dictionary.</summary>
      <returns>The value for the key, or <paramref name="defaultValue" /> if no matching key was found.</returns>
      <param name="key">The key to search for.</param>
      <param name="defaultValue">The default value to return if no matching key is found in the dictionary.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the value for a specified key in the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The value associated with the given key.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the key comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The key comparer.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets a strongly typed, read-only collection of elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A strongly typed, read-only collection of elements.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the dictionary; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the dictionary.</returns>
      <param name="item">The object to remove from the dictionary.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the original dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="keys">The keys for entries to remove from the dictionary.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the dictionary to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the dictionary is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>Always false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the dictionary to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether access to the dictionary is synchronized (thread safe).NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if access to the dictionary is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>[This topic is preliminary and is subject to change.]Gets an object that can be used to synchronize access to the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object that can be used to synchronize access to the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element with the provided key and value to the dictionary object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the dictionary object contains an element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the dictionary object has a fixed size.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the dictionary is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element that has the specified key.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Removes the element with the specified key from the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>[This topic is preliminary and is subject to change.]Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable sorted dictionary based on the contents of this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable sorted dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> interface.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>[This topic is preliminary and is subject to change.]Gets the value associated with the specified key.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the object that implements the dictionary contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key whose value will be retrieved.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the value comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The value comparer.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>[This topic is preliminary and is subject to change.]Gets a collection that contains the values of the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A collection that contains the values of the object that implements the dictionary.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>[This topic is preliminary and is subject to change.]Enumerates the contents of a binary tree.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the current position of the enumerator.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>[This topic is preliminary and is subject to change.]Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" /> class.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>[This topic is preliminary and is subject to change.]Advances the enumerator to the next element of the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the sorted dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>[This topic is preliminary and is subject to change.]Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the current element in the immutable sorted dictionary.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The current element in the immutable sorted dictionary.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>[This topic is preliminary and is subject to change.]Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> class.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable sorted set.</returns>
      <typeparam name="T">The type of items to be stored in the immutable set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable sorted set that uses the specified comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable set.</returns>
      <param name="comparer">The implementation to use when comparing items in the set.</param>
      <typeparam name="T">The type of items in the immutable set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable sorted set that contains the specified item and uses the specified comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set that contains the specified item.</returns>
      <param name="comparer">The implementation to use when comparing items in the set.</param>
      <param name="item">The item to prepopulate the set with.</param>
      <typeparam name="T">The type of items stored in the immutable set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set that contains the specified items.</returns>
      <param name="comparer">The implementation to use when comparing items in the set.</param>
      <param name="items">An array that contains the items to prepopulate the set with.</param>
      <typeparam name="T">The type of items in the immutable set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable sorted set that contains the specified item.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set that contains the specified item.</returns>
      <param name="item">The item to prepopulate the set with.</param>
      <typeparam name="T">The type of items in the immutable set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable sorted set that contains the specified array of items.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set that contains the specified items.</returns>
      <param name="items">An array that contains the items to prepopulate the set with.</param>
      <typeparam name="T">The type of items in the immutable set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>Returns an empty collection.</summary>
      <returns>The immutable collection.</returns>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>Returns an empty collection.</summary>
      <returns>The immutable collection.</returns>
      <param name="comparer">The comparer.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.From``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable collection prefilled with the specified items.</summary>
      <returns>The new immutable collection.</returns>
      <param name="comparer">The comparer.</param>
      <param name="items">The items to prepopulate.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.From``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable collection prefilled with the specified items.</summary>
      <returns>The new immutable collection.</returns>
      <param name="items">The items to prepopulate.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence and produces an immutable sorted set of its contents.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable sorted set that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>[This topic is preliminary and is subject to change.]Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable sorted set that contains the items in the specified sequence.</returns>
      <param name="source">The sequence to enumerate.</param>
      <param name="comparer">The comparer to use for initializing and adding members to the sorted set.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable sorted set implementation.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="T">The type of elements in the set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified value to this immutable sorted set. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the element added, or this set if the element is already in this set.</returns>
      <param name="value">The value to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all elements from the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty set with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether this immutable sorted set contains the specified value. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the set contains the specified value; otherwise, false.</returns>
      <param name="value">The value to check for.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of elements in the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of elements in the immutable sorted set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes a specified set of items from this immutable sorted set. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the items removed; or the original set if none of the items were in the set.</returns>
      <param name="other">The items to remove from this set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>[This topic is preliminary and is subject to change.]Gets the position within this immutable sorted set that the specified value appears in.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The index of the specified <paramref name="item" /> in the sorted set, if <paramref name="item" /> is found. If <paramref name="item" /> is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If <paramref name="item" /> is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.</returns>
      <param name="item">The value whose position is being sought.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable sorted set that contains elements that exist both in this set and in the specified set. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable sorted set that contains any elements that exist in both sets.</returns>
      <param name="other">The set to intersect with this one.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether this immutable sorted set is empty.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if this set is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable sorted set is a proper superset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable sorted set is a subset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable sorted set is a superset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Gets the element of the immutable sorted set at the given index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the given position.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets the comparer used to sort keys in the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The comparer used to sort keys.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>[This topic is preliminary and is subject to change.]Gets the maximum value in the immutable sorted set, as defined by the comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The maximum value in the set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>[This topic is preliminary and is subject to change.]Gets the minimum value in the immutable sorted set, as defined by the comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The minimum value in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable sorted set and a specified collection share common elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified value from this immutable sorted set. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable sorted set with the element removed, or this set if the element was not found in the set.</returns>
      <param name="value">The element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>[This topic is preliminary and is subject to change.]Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that iterates over this immutable sorted set in reverse order.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that iterates over the immutable sorted set in reverse order.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current immutable sorted set and the specified collection contain the same elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the sets are equal; otherwise, false. </returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new immutable sorted set.</returns>
      <param name="other">The other sequence of items.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified value to the collection. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The value to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all the items from the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the collection to an array, starting at a particular array index. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the immutable sorted set is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the set is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the collection. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false.</returns>
      <param name="item">The object to remove from the collection.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>[This topic is preliminary and is subject to change.]Inserts an item in the set at the specified index..NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes the  item at the specified index. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element to the current set and returns a value to indicate if the element was successfully added. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the element is added to the set; false if the element is already in the set.</returns>
      <param name="item">The element to add to the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes all elements in the specified collection from the current set. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection of items to remove from the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains only elements that are also in a specified collection NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains all elements that are present in either the current set or the specified collection. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the set to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether access to the immutable sorted set is synchronized.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if access to the set is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>[This topic is preliminary and is subject to change.]Gets an object that can be used to synchronize access to the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object that can be used to synchronize access to the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Adds an item to the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</returns>
      <param name="value">The object to add to the set.</param>
      <exception cref="T:System.NotSupportedException">The set is read-only or has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all items from the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the set contains a specific value.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the object is found in the set; otherwise, false.</returns>
      <param name="value">The object to locate in the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Determines the index of a specific item in the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Inserts an item into the set at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert into the set.</param>
      <exception cref="T:System.NotSupportedException">The set is read-only or has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the immutable sorted set has a fixed size.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the set has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether the immutable sorted set is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the set is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the element at the specified index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of a specific object from the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="value">The object to remove from the set.</param>
      <exception cref="T:System.NotSupportedException">The set is read-only or has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Removes the item at the specified index of the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">The set is read-only or has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds the specified element to this immutable set. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the element added, or this set if the element is already in the set.</returns>
      <param name="value">The element to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty set that has the same sorting and ordering semantics as this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the elements in the specified collection from the current immutable set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new set with the items removed; or the original set if none of the items were in the set.</returns>
      <param name="other">The items to remove from this set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable set that contains elements that exist in both this set and the specified set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set that contains any elements that exist in both sets.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified element from this immutable set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set with the specified element removed, or the current set if the element cannot be found in the set.</returns>
      <param name="value">The element to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable set with the items added; or the original set if all the items were already in the set.</returns>
      <param name="other">The collection to add elements from.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>[This topic is preliminary and is subject to change.]Creates a collection that has the same contents as this immutable sorted set and can be efficiently mutated across multiple operations by using standard mutable interfaces.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>Searches the set for a given value and returns the equal value it finds, if any.</summary>
      <returns>A value indicating whether the search was successful.</returns>
      <param name="equalValue">The value to search for.</param>
      <param name="actualValue">The value from the set that the search found, or the original value if the search yielded no match.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Adds a given set of items to this immutable sorted set. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new set with the items added; or the original set if all the items were already in the set.</returns>
      <param name="other">The items to add.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>[This topic is preliminary and is subject to change.]Returns the immutable sorted set that has the specified key comparer. NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The immutable sorted set that has the specified key comparer.</returns>
      <param name="comparer">The comparer to check for.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>[This topic is preliminary and is subject to change.]Represents a sorted set that mutates with little or no memory allocations, can produce or build on immutable sorted set instances very efficiently.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element to the current set and returns a value to indicate whether the element was successfully added.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the element is added to the set; false if the element is already in the set</returns>
      <param name="item">The element to add to the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all elements from this set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the set contains the specified object.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> is found in the set; otherwise, false.</returns>
      <param name="item">The object to locate in the set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>[This topic is preliminary and is subject to change.]Gets the number of elements in the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The number of elements in this set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified set of items from the current set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection of items to remove from the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A enumerator that can be used to iterate through the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains only elements that are also in a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set is a proper (strict) subset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set is a proper (strict) superset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a proper superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set is a subset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection is compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set is a superset of a specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is a superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>[This topic is preliminary and is subject to change.]Gets or sets the object that is used to determine equality for the values in the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The comparer that is used to determine equality for the values in the set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>[This topic is preliminary and is subject to change.]Gets the maximum value in the immutable sorted set, as defined by the comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The maximum value in the set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>[This topic is preliminary and is subject to change.]Gets the minimum value in the immutable sorted set, as defined by the comparer.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The minimum value in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set overlaps with the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>[This topic is preliminary and is subject to change.]Removes the first occurrence of the specified object from the set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if <paramref name="item" /> was removed from the set; false if <paramref name="item" /> was not found in the set.</returns>
      <param name="item">The object to remove from the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates over the immutable sorted set in reverse order.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that iterates over the set in reverse order.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Determines whether the current set and the specified collection contain the same elements.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the current set is equal to <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>[This topic is preliminary and is subject to change.]Adds an element to the current set and returns a value to indicate whether the element was successfully added.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="item">The element to add to the set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the collection to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether this instance is read-only.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>Always false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>[This topic is preliminary and is subject to change.]Copies the elements of the set to an array, starting at a particular array index.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>[This topic is preliminary and is subject to change.]Gets a value indicating whether access to the immutable sorted set is synchronized (thread safe).NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if access to the set is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>[This topic is preliminary and is subject to change.]Gets an object that can be used to synchronize access to the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An object that can be used to synchronize access to the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>[This topic is preliminary and is subject to change.]Creates an immutable sorted set based on the contents of this instance.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An immutable set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>[This topic is preliminary and is subject to change.]Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <param name="other">The collection to compare to the current state.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>[This topic is preliminary and is subject to change.]Enumerates the contents of a binary tree.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the current position of the enumerator.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>[This topic is preliminary and is subject to change.]Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" /> class.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>[This topic is preliminary and is subject to change.]Advances the enumerator to the next element of the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the sorted set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>[This topic is preliminary and is subject to change.]Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the current element in the immutable sorted set.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The current element in the immutable sorted set.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>[This topic is preliminary and is subject to change.]Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> class.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>[This topic is preliminary and is subject to change.]Creates an empty immutable stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable stack.</returns>
      <typeparam name="T">The type of items to be stored in the immutable stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable stack that contains the specified item.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable collection that contains the specified item.</returns>
      <param name="item">The item to prepopulate the stack with.</param>
      <typeparam name="T">The type of items in the immutable stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>[This topic is preliminary and is subject to change.]Creates a new immutable stack that contains the specified array of items.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A new immutable stack that contains the specified items.</returns>
      <param name="items">An array that contains the items to prepopulate the stack with.</param>
      <typeparam name="T">The type of items in the immutable stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.From``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable collection prefilled with the specified items.</summary>
      <returns>The new immutable collection.</returns>
      <param name="items">The items to prepopulate.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified item from an immutable stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A stack; never null.</returns>
      <param name="stack">The stack to modify.</param>
      <param name="value">The item to remove from the stack.</param>
      <typeparam name="T">The type of items contained in the stack.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>[This topic is preliminary and is subject to change.]Represents an immutable stack.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
      <typeparam name="T">The type of element on the stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all objects from the immutable stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An empty immutable stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the immutable stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator that can be used to iterate through the stack.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>[This topic is preliminary and is subject to change.]Gets a value that indicates whether this instance of the immutable stack is empty.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if this instance is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>[This topic is preliminary and is subject to change.]Returns the object at the top of the stack without removing it.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The object at the top of the stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>[This topic is preliminary and is subject to change.]Removes the element at the top of the immutable stack and returns the stack after the removal.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A stack; never null.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>[This topic is preliminary and is subject to change.]Removes the specified element from the immutable stack and returns the stack after the removal.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>A stack; never null.</returns>
      <param name="value">The value to remove from the stack.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>[This topic is preliminary and is subject to change.]Inserts an object at the top of the immutable stack and returns the new stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new stack.</returns>
      <param name="value">The object to push onto the stack.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through the collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An enumerator  that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>[This topic is preliminary and is subject to change.]Returns an enumerator that iterates through a collection.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>[This topic is preliminary and is subject to change.]Removes all elements from the immutable stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The empty immutable stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>[This topic is preliminary and is subject to change.]Removes the element at the top of the immutable stack and returns the new stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new stack; never null.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>[This topic is preliminary and is subject to change.]Inserts an element at the top of the immutable stack and returns the new stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The new stack.</returns>
      <param name="value">The element to push onto the stack.</param>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>[This topic is preliminary and is subject to change.]Enumerates the contents of an immutable stack without allocating any memory.The APIs for immutable collections are not part of the core class library distributed with the .NET Framework. To install these APIs, open your project in Visual Studio, choose Manage NuGet Packages from the Project menu, choose Include Prerelease from the middle pane, and search online for the Microsoft.Bcl.Immutable package. (Read about .NET Framework NuGet packages and how to install them.)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the current position of the enumerator.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.Dispose">
      <summary>[This topic is preliminary and is subject to change.]Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableStack`1.Enumerator" /> class.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>[This topic is preliminary and is subject to change.]Advances the enumerator to the next element of the immutable stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.Reset">
      <summary>[This topic is preliminary and is subject to change.]Sets the enumerator to its initial position, which is before the first element in the stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>[This topic is preliminary and is subject to change.]Gets the element at the current position in the stack.NuGet package: Microsoft.Bcl.Immutable (about NuGet and how to install)</summary>
      <returns>The element at the current position in the stack.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>LINQ extension method overrides that offer greater efficiency for <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> than the standard LINQ methods</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <typeparam name="TAccumulate">The type of the accumulated value.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <typeparam name="TAccumulate">The type of the accumulated value.</typeparam>
      <typeparam name="TResult">The type of result returned by the result selector.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gets a value indicating whether all elements in this collection match a given condition.</summary>
      <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.</returns>
      <param name="predicate">The predicate.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Gets a value indicating whether any elements are in this collection.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gets a value indicating whether any elements are in this collection that match a given condition.</summary>
      <param name="predicate">The predicate.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns a value indicating whether this collection contains any elements.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the first element in a sequence that satisfies a specified condition.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element in a sequence that satisfies a specified condition.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns the first element in the collection.</summary>
      <typeparam name="T"></typeparam>
      <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns the first element in the collection, or the default value if the collection is empty.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the last element of a sequence.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns the last element in the collection.</summary>
      <typeparam name="T"></typeparam>
      <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns the last element in the collection, or the default value if the collection is empty.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <param name="immutableArray">The immutable array.</param>
      <param name="selector">The selector.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <typeparam name="TResult">The type of the result element.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determines whether two sequences are equal according to an equality comparer.</summary>
      <typeparam name="TDerived">The type of element in the compared array.</typeparam>
      <typeparam name="TBase">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determines whether two sequences are equal according to an equality comparer.</summary>
      <typeparam name="TDerived">The type of element in the compared array.</typeparam>
      <typeparam name="TBase">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>Determines whether two sequences are equal according to an equality comparer.</summary>
      <typeparam name="TDerived">The type of element in the compared array.</typeparam>
      <typeparam name="TBase">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Copies the contents of this array to a mutable array.</summary>
      <returns>The newly instantiated array.</returns>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>Creates a dictionary based on the contents of this array.</summary>
      <returns>The newly initialized dictionary.</returns>
      <param name="keySelector">The key selector.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates a dictionary based on the contents of this array.</summary>
      <returns>The newly initialized dictionary.</returns>
      <param name="keySelector">The key selector.</param>
      <param name="comparer">The comparer to initialize the dictionary with.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>Creates a dictionary based on the contents of this array.</summary>
      <returns>The newly initialized dictionary.</returns>
      <param name="keySelector">The key selector.</param>
      <param name="elementSelector">The element selector.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TElement">The type of the element.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates a dictionary based on the contents of this array.</summary>
      <returns>The newly initialized dictionary.</returns>
      <param name="keySelector">The key selector.</param>
      <param name="elementSelector">The element selector.</param>
      <param name="comparer">The comparer to initialize the dictionary with.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TElement">The type of the element.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
    </member>
  </members>
</doc>